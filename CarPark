
class Program
{
    static void Main()
    {
        Menu menu = new Menu();
        menu.ShowMenu();
    }
}
class DisplayHelper
{
    public static void ShowMessage(string message, int delayMilliseconds = 1500)
    {
        Console.Clear();
        Console.WriteLine(message);
        Thread.Sleep(delayMilliseconds);
        Console.Clear();
    }
}
class Menu
{
    public void ShowMenu()
    {
        string choice;
        do
        {
            Console.Clear();
            Console.WriteLine("= MENU =");
            Console.WriteLine("1. Enter");
            Console.WriteLine("2. Leave");
            Console.WriteLine("3. Management");
            Console.WriteLine("Q. Quit");
            Console.Write("Choose an option: ");
            choice = Console.ReadLine();
            switch (choice.ToLower())
            {
                case "1":
                case "enter":
                    Parking.EnterCarPark();
                    break;
                case "2":
                case "leave":
                    Parking.LeaveCarPark();
                    break;
                case "3":
                case "management":
                    Management management = new Management();
                    management.ShowMenu();
                    break;
                case "q":
                case "quit":
                    DisplayHelper.ShowMessage("Quitting...");
                    break;
                default:
                    DisplayHelper.ShowMessage("Invalid input, try again");
                        break;
            }
        } while (choice.ToLower() != "q" || choice.ToLower() != "quit");
    }
}
class Parking
{
    public static void EnterCarPark()
    {
        Console.Clear();
        string plateNumber;
        while (true)
        {
            Console.Write("Enter plate number: ");
            plateNumber = Console.ReadLine();
            plateNumber = plateNumber.Replace(" ", "").ToUpper();
            if (!ValidateLicensePlate(plateNumber))
            {
                DisplayHelper.ShowMessage("Invalid plate number, try again");
            }
            else
            {
                break;
            }
        }
        if (CheckCarCount())
        {
            FileHandlers.AddCarToCarPark(plateNumber);
            DisplayHelper.ShowMessage("Plate recorded, you may enter");
        }
        else
        {
            DisplayHelper.ShowMessage("Car park is full, come back later.\nReturning to menu...");
        }
    }

    public static void LeaveCarPark()
    {
        string plateNumber;
        while (true)
        {
            Console.Clear();
            Console.Write("Enter plate number: ");
            plateNumber = Console.ReadLine();
            plateNumber = plateNumber.Replace(" ", "").ToUpper();
            if (FileHandlers.IsCarInCarPark(plateNumber))
            {
                break;
            }
            else
            {
                DisplayHelper.ShowMessage("Invalid plate number, try again");
            }
        }
        double cost = FileHandlers.CalculateFeeForCar(plateNumber);
        do
        {
            Console.Clear();
            Console.WriteLine("Total cost is: Â£" + cost);
            Console.Write("Insert payment: ");
            double payment = Convert.ToDouble(Console.ReadLine());
            cost -= payment;
        } while (cost != 0);
        DisplayHelper.ShowMessage("Plate removed, you may leave.");
        FileHandlers.RemoveFromCarPark(plateNumber); 
    }
    private static bool ValidateLicensePlate(string plateNumber)
    {
        if (plateNumber.Length != 7) // checks if the plate number is 7 digits long
        {
            return false;
        }
        if (!char.IsLetter(plateNumber[0]) || !char.IsLetter(plateNumber[1])) // checks if first 2 characters are letters
        {
            return false;
        }
        if (!char.IsDigit(plateNumber[2]) || !char.IsDigit(plateNumber[3])) // checks if second 2 characters are numbers
        {
            return false;
        }
        if (!char.IsLetter(plateNumber[4]) || !char.IsLetter(plateNumber[5]) || !char.IsLetter(plateNumber[6])) // checks the final 3 characters are letters
        {
            return false;
        }
        return true;
    }
    private static bool CheckCarCount()
    {
        string[] cars = File.ReadAllLines("VehiclesInCarPark.txt");
        return cars.Length <= 45;
    }
}
class Management
{
    public void ShowMenu()
    {
        if (AuthManagement())
        {
            string choice;
            do
            {
                Console.Clear();
                Console.WriteLine("= MANAGEMENT =");
                Console.WriteLine("1. Current capacity");
                Console.WriteLine("2. Total capacity");
                Console.WriteLine("3. Current earnings");
                Console.WriteLine("4. Total earnings");
                Console.WriteLine("Q. Quit");
                choice = Console.ReadLine();
                switch (choice.ToLower())
                {
                    case "1":
                        break;
                    case "2":
                        break;
                    case "3":
                        break;
                    case "4":
                        break;
                    case "Q":
                    case "Quit":
                        break;
                }
            } while (choice.ToLower() != "q" || choice.ToLower() != "quit");
        }
        else
        {
            DisplayHelper.ShowMessage("Access denied.\nQuitting...");
        }
    }

    private bool AuthManagement()
    {
        Console.Clear();
        for (int attemptsLeft = 3; attemptsLeft > 0; attemptsLeft--)
        {
            Console.Write("Enter admin password: ");
            string adminPass = Console.ReadLine();
            if (adminPass == "AdminPassword")
            {
                return true;
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Password incorrect, try again");
                Console.WriteLine(attemptsLeft - 1 + " Attempts left");
            }
        }
        return false;
    }
}
class FileHandlers
{
    private static string filePath = "VehiclesInCarPark.txt";
    public static bool IsCarInCarPark(string licensePlate)
    {
        if (File.Exists(filePath))
        {
            var lines = File.ReadAllLines(filePath);
            foreach (string line in lines)
            {
                string[] parts = line.Split(',');
                if (parts[0].Trim().Equals(licensePlate.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
        }
        return false;
    }
    public static void AddCarToCarPark(string licensePlate)
    {
        string entryTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        string entry = $"{licensePlate},{entryTime}"; 
        File.AppendAllText(filePath, entry + Environment.NewLine); 
    }
    public static void RemoveFromCarPark(string licensePlate)
    {
        if (File.Exists(filePath))
        {
            var lines = File.ReadAllLines(filePath);
            List<string> updatedLines = new List<string>();

            foreach (string line in lines)
            {
                string[] parts = line.Split(',');
                if (!parts[0].Trim().Equals(licensePlate.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    updatedLines.Add(line);
                }
            }

            File.WriteAllLines(filePath, updatedLines); 
        }
    }
    public static DateTime? GetEntryTime(string licensePlate) 
    {
    if (File.Exists(filePath))
        {
            var lines = File.ReadAllLines(filePath);
            foreach (string line in lines)
            {
                string[] parts = line.Split(',');
                if (parts[0].Trim().Equals(licensePlate.Trim(), StringComparison.OrdinalIgnoreCase))
                {
                    return DateTime.Parse(parts[1].Trim());
                }
            }
        }
        return null;
    }
    public static double CalculateFeeForCar(string licensePlate)
    {
        DateTime? entryTime = GetEntryTime(licensePlate);
        if (entryTime.HasValue)
        {
            DateTime exitTime = DateTime.Now;
            return ParkingFeeCalculator.CalculateParkingFee(entryTime.Value, exitTime);
        }
        else
        {
            throw new Exception("Car not found in the car park.");
        }
    }
}
class ParkingFeeCalculator
{
    private const double FirstHourFee = 2.00;
    private const double AdditionalHourlyFee = 1.50;
    private const double DailyMaxFee = 20.00;

    public static double CalculateParkingFee(DateTime entryTime, DateTime exitTime)
    {
        TimeSpan duration = exitTime - entryTime;
        int fullDays = (int)duration.TotalDays;
        double remainingHours = duration.TotalHours - (fullDays * 24);
        double totalFee = 0;
        totalFee += fullDays * DailyMaxFee;

        if (remainingHours > 0)
        {
            if (remainingHours <= 1)
            {
                totalFee += FirstHourFee;
            }
            else
            {
                totalFee += FirstHourFee + ((int)Math.Ceiling(remainingHours) - 1) * AdditionalHourlyFee;
            }
            totalFee = Math.Min(totalFee, (fullDays + 1) * DailyMaxFee);
        }
        return totalFee;
    }
}
